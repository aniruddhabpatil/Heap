// https://leetcode.com/problems/k-closest-points-to-origin/description/

vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        priority_queue<pair<int,pair<int,int> >> maxh;
        for(int i=0;i<points.size();i++)
        {
            maxh.push({points[i][0]*points[i][0] + points[i][1]*points[i][1],{points[i][0],points[i][1]}});
            
            if(maxh.size()>k)
                maxh.pop();
        }
        /*
        cout<<minh.top().first<<endl;
        cout<<minh.top().second.first<<endl;
        cout<<minh.top().second.second<<endl;
        */
        vector<vector<int>> ans;
        while(maxh.size()>0)
        {
            vector<int> a;
            pair<int,int> p=maxh.top().second;
            a.push_back(p.first);
            a.push_back(p.second);
            
            ans.push_back(a);
            maxh.pop();
        }
        return ans;
    }
